// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(uuid())
  clerkUserId String   @unique
  email       String   @unique
  name        String?
  imageUrl    String?
  role        String   @default("customer")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Order       Order[]
}

model Customer {
  id        String   @id @default(cuid())
  name      String
  phone     String?
  seatNo    String?
  orders    Order[]
  createdAt DateTime @default(now())
}

model Food {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Float
  imageUrl    String?
  available   Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  orderItems OrderItem[]
}

model Order {
  id          String      @id @default(cuid())
  customerId  String
  userId      String?
  tableId     String?
  totalAmount Float
  status      OrderStatus @default(PENDING)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  customer   Customer    @relation(fields: [customerId], references: [id])
  user       User?       @relation(fields: [userId], references: [id])
  table      Table?      @relation(fields: [tableId], references: [id])
  orderItems OrderItem[]
  payment    Payment?
}

enum OrderStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELLED
}

model OrderItem {
  id       String @id @default(cuid())
  orderId  String
  foodId   String
  quantity Int
  subtotal Float

  order Order @relation(fields: [orderId], references: [id])
  food  Food  @relation(fields: [foodId], references: [id])
}

model Table {
  id     String      @id @default(cuid())
  number Int         @unique
  seats  Int
  status TableStatus @default(AVAILABLE)
  orders Order[]
}

enum TableStatus {
  AVAILABLE
  OCCUPIED
  RESERVED
}

model Payment {
  id          String         @id @default(cuid())
  orderId     String         @unique
  amount      Float
  method      PaymenetMethod
  paymentDate DateTime       @default(now())

  order Order @relation(fields: [orderId], references: [id])
}

enum PaymenetMethod {
  CASH
  CARD
  ONLINE
}
